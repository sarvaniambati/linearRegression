# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CyMoGV-2rHEv2uuE0-Jg042TSjU_K0vo
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
regr = linear_model.LinearRegression()
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
from sklearn.model_selection import cross_val_score
from sklearn.metrics import r2_score

# import data
original_data = pd.read_excel("/content/Data_file.xlsx",skiprows=2)
test_data = pd.read_excel("/content/Test_data_file.xlsx",usecols="A:L")
data=original_data

data.drop('S.No.', axis = 1, inplace = True)

data.head()

test_data.head()

data.info()

data.describe()

test_data.info()

test_data.describe()

"""Turing categorical variable to numerical variable"""

print(data['College'].unique())
print(data['Role'].unique())
print(data['City type'].unique())

data = pd.concat([data, pd.get_dummies(data['College'])], axis=1)
data = pd.concat([data, pd.get_dummies(data['Role'])], axis=1)
data = pd.concat([data, pd.get_dummies(data['City type'])], axis=1)
data.drop(['College','Role','City type'], axis=1 , inplace = True)

data

# Correlational Matrix
data.corr()

sns.pairplot(original_data, vars=["Previous CTC","Previous job changes","Graduation marks","Exp (Months)","CTC"])

sns.pairplot(original_data, kind="scatter", hue = "College", vars=["Previous CTC","Previous job changes","Exp (Months)","CTC"])

sns.pairplot(original_data, hue = "Role", vars=["Previous CTC","Previous job changes","Exp (Months)","CTC"])

sns.kdeplot(original_data.loc[original_data['College'] == "Tier 1", "CTC"], shade=True, color="g", label="Tier 1", alpha=.7)
sns.kdeplot(original_data.loc[original_data['College'] == "Tier 2", "CTC"], shade=True, color="deeppink", label="Tier 2", alpha=.7)
sns.kdeplot(original_data.loc[original_data['College'] == "Tier 3", "CTC"], shade=True, color="dodgerblue", label="Tier 3", alpha=.7)
plt.legend()
plt.show()

sns.kdeplot(original_data.loc[original_data['Role'] == "Manager", "CTC"], shade=True, color="g", label="Manager", alpha=.7)
sns.kdeplot(original_data.loc[original_data['Role'] == "Executive", "CTC"], shade=True, color="deeppink", label="Executive", alpha=.7)
plt.legend()
plt.show()

viz = data[['CTC','Previous CTC']]
viz.hist()
plt.show()

plt.bar(original_data['College'], original_data['CTC'])

plt.bar(original_data['Role'], original_data['CTC'])

sns.boxplot(original_data['City type'], original_data['CTC'])

sns.boxplot(original_data['Role'], original_data['CTC'])

sns.boxplot(original_data['College'], original_data['CTC'])



sns.countplot("Role", data=original_data)

df = original_data.groupby('College').size()
df.plot(kind='pie', subplots=True, figsize=(8, 8), explode=[0.1,0,0])
plt.ylabel("")
plt.show()

df = original_data.groupby('Role').size()
df.plot(kind='pie', subplots=True, figsize=(8, 8), explode=[0,0.1])
plt.ylabel("")
plt.show()

df = original_data.groupby('City type').size()
df.plot(kind='pie', subplots=True, figsize=(8, 8), explode=[0,0])
plt.ylabel("")
plt.show()



"""Training model for linear regression with feature extraction"""

xtrain = data[['Exp (Months)', 'Previous CTC','Graduation marks']]
xtest = test_data[['Exp','previous CTC','Graduation marks']]
Xtrain = scaler.fit_transform(xtrain)
Xtest = scaler.fit_transform(xtest)
Ytrain = data['CTC']
Ytest = test_data['Actual CTC']

"""Fitting model"""

regr.fit(Xtrain, Ytrain)
print('Coefficients: ', regr.coef_)
print('Intercept: ', regr.intercept_)

"""
predicted CTC"""

Ytest_pred = regr.predict(Xtest)
Final = pd.DataFrame({'Actual CTC': Ytest, 'Predicted CTC': Ytest_pred})
print(Final)

"""model evaluation"""

MSE = np.mean((Ytest_pred - Ytest) ** 2)
print("Residual sum of squares: %.2f" % MSE)
print('Root Mean Squared Error:', np.sqrt(MSE))
print('Variance score: %.2f' % regr.score(Xtest, Ytest))
print("R2 : ",r2_score(Ytest, Ytest_pred))

ax1 = sns.distplot(Ytest, hist=False, color="r", label="Actual CTC")
sns.distplot(Ytest_pred, hist=False, color="b", label="Predicted CTC" , ax=ax1)
plt.legend()
plt.show()

sns.regplot(Ytest, Ytest_pred)

"""Final Dataset with Predicted CTC"""

Output = pd.concat([test_data, pd.DataFrame(Ytest_pred, columns=["Predicted CTC"])], axis=1)



"""Export The Final Excel File"""

file_name = 'Test_Data.xlsx'
# saving the excel file
Output.to_excel(file_name)
print('DataFrame is written to Excel File successfully.')